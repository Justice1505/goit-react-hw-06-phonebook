{"version":3,"sources":["Components/contactList/ContactList.module.css","Components/filter/Filter.module.css","Redux/phonebook/phonebook-actions.js","Components/contactList/ContactList.js","Components/contatctForm/ContactForm.js","Components/filter/Filter.js","Components/App.js","Redux/phonebook/phonebook-reducers.js","Redux/store.js","index.js","Components/contatctForm/ContactForm.module.css"],"names":["module","exports","addNewContact","createAction","name","number","payload","id","uuidv4","getAllContacts","removeContact","findContact","mapDispatchToProps","connect","state","filtered","contacts","filter","contactsList","items","contact","toLowerCase","includes","onFindContact","map","className","s","item","span","btn","type","onClick","contatcs","useState","setName","setNumber","handleChange","e","target","value","isThereContact","some","Form","onSubmit","preventDefault","alert","label","input","onChange","pattern","title","required","filterlabel","App","setСontactsList","setFilter","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","newContact","idx","createReducer","action","_","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","phonebookReducer","devTools","process","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7dd8848a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactList_btn__3krWV\",\"item\":\"ContactList_item__38G2Y\",\"span\":\"ContactList_span__30Qe8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__njmMC\"};","// import { v4 as uuidv4 } from 'uuid';\n// import {\n//   ADD_CONTACT,\n//   GET_CONTACTS,\n//   REMOVE_CONTACT,\n//   FIND_CONTACT,\n// } from './phonebook-types';\n\n// export const addNewContact = (name, number) => {\n//   return {\n//     type: ADD_CONTACT,\n//     payload: { id: uuidv4(), name, number },\n//   };\n// };\n\n// export const getAllContacts = contacts => {\n//   return {\n//     type: GET_CONTACTS,\n//     payload: contacts,\n//   };\n// };\n\n// export const removeContact = id => {\n//   return {\n//     type: REMOVE_CONTACT,\n//     payload: id,\n//   };\n// };\n\n// export const findContact = value => ({\n//   type: FIND_CONTACT,\n//   payload: value,\n// });\n\n// ===================TOOLKIT==================================================================\nimport { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const addNewContact = createAction(\n  'phonebook/addContact',\n  (name, number) => {\n    return {\n      payload: {\n        id: uuidv4(),\n        name,\n        number,\n      },\n    };\n  },\n);\n\nexport const getAllContacts = createAction('phonebook/getContacts');\n\nexport const removeContact = createAction('phonebook/removeContact');\n\nexport const findContact = createAction('phonebook/findContact');\n","import React from 'react';\n\nimport { connect } from 'react-redux';\nimport { removeContact } from '../../Redux/phonebook/phonebook-actions';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ filtered, removeContact, contactsList }) => {\n  const onFindContact = (filtered, contactsList) => {\n    return contactsList.filter(contact =>\n      contact.name.toLowerCase().includes(filtered.toLowerCase()),\n    );\n  };\n  const findContact = onFindContact(filtered, contactsList);\n\n  return (\n    <ul>\n      {findContact &&\n        findContact.map(contact => {\n          return (\n            <li className={s.item} key={contact.id}>\n              <span className={s.span}>{contact.name}:</span>\n              &nbsp;\n              <span className={s.span}>{contact.number}</span>\n              <button\n                className={s.btn}\n                type=\"button\"\n                id={contact.id}\n                onClick={() => removeContact(contact.id)}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nconst mapStateToProps = state => ({\n  filtered: state.contacts.filter,\n  contactsList: state.contacts.items,\n});\n\nconst mapDispatchToProps = {\n  removeContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n  filtered: PropTypes.string.isRequired,\n  removeContact: PropTypes.func.isRequired,\n  contactsList: PropTypes.array.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\nimport { connect } from 'react-redux';\nimport { addNewContact } from '../../Redux/phonebook/phonebook-actions';\n\nconst ContactForm = ({ contatcs, addNewContact }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (isThereContact(name)) {\n      return alert(`${name} has been already in contact list`);\n    }\n    addNewContact(name, number);\n    reset();\n  };\n\n  const isThereContact = name =>\n    contatcs.some(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n  return (\n    <form className={s.Form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name:\n        <input\n          className={s.input}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label className={s.label}>\n        Number:\n        <input\n          className={s.input}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <button className={s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nconst mapStateToProps = state => ({\n  contatcs: state.contacts.items,\n});\n\nconst mapDispatchToProps = {\n  addNewContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  addNewContact: PropTypes.func.isRequired,\n  contatcs: PropTypes.array.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport { findContact } from '../../Redux/phonebook/phonebook-actions';\n\nconst Filter = ({ filter, findContact }) => {\n  const handleChange = e => {\n    const { value } = e.target;\n\n    findContact(value);\n  };\n\n  return (\n    <label className={s.label}>\n      Find contacts by name:\n      <input\n        className={s.filterlabel}\n        name=\"filter\"\n        type=\"text\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </label>\n  );\n};\n\nconst mapStateToProps = state => ({\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  findContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  findContact: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactList from './contactList/ContactList';\nimport ContactForm from './contatctForm/ContactForm';\nimport Filter from './filter/Filter';\nimport './App.css';\n\nconst App = () => {\n  const [contactsList, setСontactsList] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const contacts = JSON.parse(localStorage.getItem('contacts'));\n    if (contacts) {\n      setСontactsList([...contactsList, ...contacts]);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contactsList));\n  }, [contactsList]);\n\n  const addNewContact = newContact => {\n    setСontactsList([...contactsList, { ...newContact, id: uuidv4() }]);\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    name === 'filter' && setFilter(value);\n  };\n\n  const removeContact = idx => {\n    setСontactsList(contactsList => {\n      return contactsList.filter(contact => contact.id !== idx);\n    });\n  };\n\n  const findContact = e => {\n    return contactsList.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  const isThereContact = name =>\n    contactsList.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n  return (\n    <div className=\"block\">\n      <h1>Phonebook</h1>\n\n      <ContactForm\n        addNewContact={addNewContact}\n        isThereContact={isThereContact}\n      />\n\n      <h2>Contacts</h2>\n\n      <Filter filter={filter} onChange={handleChange} />\n\n      <ContactList findContact={findContact()} removeContact={removeContact} />\n    </div>\n  );\n};\n\nexport default App;\n","// import { combineReducers } from 'redux';\n\n// import {\n//   ADD_CONTACT,\n//   GET_CONTACTS,\n//   REMOVE_CONTACT,\n//   FIND_CONTACT,\n// } from './phonebook-types';\n\n// const items = (\n//   state = [],\n\n//   action,\n// ) => {\n//   switch (action.type) {\n//     case ADD_CONTACT:\n//       return [...state, action.payload];\n//     case GET_CONTACTS:\n//       return action.payload;\n//     case REMOVE_CONTACT:\n//       return state.filter(contact => contact.id !== action.payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', action) => {\n//   switch (action.type) {\n//     case FIND_CONTACT:\n//       return action.payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default combineReducers({\n//   items,\n//   filter,\n// });\n\n// ===================TOOLKIT==================================================================\n\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addNewContact,\n  getAllContacts,\n  removeContact,\n  findContact,\n} from './phonebook-actions';\n\nconst items = createReducer([], {\n  [addNewContact]: (state, action) => [...state, action.payload],\n  [getAllContacts]: (state, action) => action.payload,\n  [removeContact]: (state, action) =>\n    state.filter(contact => contact.id !== action.payload),\n});\n\nconst filter = createReducer('', {\n  [findContact]: (_, action) => action.payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","// import { createStore, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import phonebookReducer from './phonebook/phonebook-reducers';\n\n// const rootReducer = combineReducers({\n//   contacts: phonebookReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;\n\n// ===================TOOLKIT==============================\n\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n\nimport phonebookReducer from './phonebook/phonebook-reducers';\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n  reducer: { contacts: phonebookReducer },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './Components/App';\nimport './index.css';\nimport store from './Redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__26f7E\",\"label\":\"ContactForm_label__3SF-A\",\"btn\":\"ContactForm_btn__eXY_F\"};"],"sourceRoot":""}